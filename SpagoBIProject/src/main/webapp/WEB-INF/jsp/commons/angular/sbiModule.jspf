

<script>
var sbiM=angular.module('sbiModule',[]);

// sbiM.config(function($mdThemingProvider) {
// 	$mdThemingProvider.theme('default').primaryPalette('grey').accentPalette('blue-grey');
// });

sbiM.factory('sbiModule_config',function(){
	return {
    	contextName: '<%= GeneralUtilities.getSpagoBiContext() %>',
    	adapterPath: '<%= GeneralUtilities.getSpagoBiContext() + GeneralUtilities.getSpagoAdapterHttpUrl() %>',
    	curr_country: '<%= curr_country %>',
    	curr_language: '<%= curr_language%>',
    	<%-- 		loginUrl: '<%= GeneralUtilities.getSpagoBiContext() %>', // login url, used when session is expired --%>
    	<%--     	currTheme: '<%= currTheme %>', --%>
		<%-- 	supportedLocales: <%= GeneralUtilities.getSupportedLocalesAsJSONArray().toString() %>, --%>
 		localizedDateFormat: '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %>',  // the date format localized according to user language and country 
		localizedTimestampFormat: '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %> H:i:s',  // the timestamp format localized according to user language and country
		clientServerDateFormat: '<%= GeneralUtilities.getServerDateFormatExtJs() %>',  // the date format to be used when communicating with server
		clientServerTimestampFormat: '<%= GeneralUtilities.getServerTimestampFormatExtJs() %>',   // the timestamp format to be used when communicating with server
		
		<%-- <%if(parametersStatePersistenceEnabled != null) {%> --%>
		<%-- isParametersStatePersistenceEnabled: <%= Boolean.valueOf(parametersStatePersistenceEnabled) %>, --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterStatePersistenceScope != null) {%> --%>
		<%-- parameterStatePersistenceScope: '<%= parameterStatePersistenceScope.toUpperCase() %>', --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parametersMementoPersistenceEnabled != null) {%> --%>
		<%-- isParametersMementoPersistenceEnabled: <%= Boolean.valueOf(parametersMementoPersistenceEnabled) %>, --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterMementoPersistenceScope != null) {%> --%>
		<%-- parameterMementoPersistenceScope: '<%= parameterMementoPersistenceScope.toUpperCase() %>', --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterMementoPersistenceDepth != null) {%> --%>
		<%-- parameterMementoPersistenceDepth: <%= parameterMementoPersistenceDepth %>, --%>
		<%-- <%}%> --%>
		
		<%-- isSSOEnabled: <%= GeneralUtilities.isSSOEnabled() %> --%>

	};
});

sbiM.config(function($mdDateLocaleProvider) {
	this.localizedDateFormat= '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %>';  // the date format localized according to user language and country 
	
	$mdDateLocaleProvider.parseDate = function(date) {
		 if (typeof date == "string" && date.length > 0){
			 var formats = localizedDateFormat.split('/');
			 var reString='';
			 //create regex based on localizedDateFormat
			 for (var i =0; i<formats.length;i++){
				if (formats[i].toUpperCase().indexOf('D')>=0 || formats[i].toUpperCase().indexOf('M')>=0){
					reString+="(\\d{1,2})\/";
				}else if (formats[i].toUpperCase().indexOf('Y')>=0){
					reString+="(\\d{2}|\\d{4})\/";
				}
			 }
			 var re = new RegExp('^'+reString.substring(0,reString.length-1)+'$');
			 var result = re.exec(date);
			 var dateCorrect = false;
			 if (result && result.length == 4){
				 var day,mm,yy;
				 for (var i =0; i<formats.length;i++){
					if (formats[i].toUpperCase().indexOf('D')>=0){
						day=result[i+1];
					}else if (formats[i].toUpperCase().indexOf('M')>=0){
						mm=result[i+1];
					}else if (formats[i].toUpperCase().indexOf('Y')>=0){
						yy=result[i+1];
					}
				 }
				 if (mm>=1 && mm<=12 && day>=1 && day <= 31){
					 if ( (mm == 11 || mm == 4 || mm == 6 || mm == 9) && day<=30){
						 dateCorrect = true;	
					 }else if ( mm == 2 && ( ((yy % 4) == 0 && day<=29) || ((yy % 4) != 0 && day<=28))){
						 dateCorrect = true;
					 }else if (mm == 1 || mm == 3 || mm == 5  || mm == 7 || mm == 8 || mm == 10 || mm == 12){
						 dateCorrect = true;
					 }
				 }
			 }
			 return dateCorrect == true ? new Date(yy,mm-1,day) : null;
		 }else{
		    return date;
		 }
	};
	
	$mdDateLocaleProvider.formatDate = function(date){
		if (!date){
			return null;
		}
		var formats = localizedDateFormat.split('/');
		var dateResult='';
		for (var time in formats){
			var partOfDate='';
			if (formats[time].toUpperCase().indexOf('D')>=0){
				partOfDate+=date.getDate();
			}else if (formats[time].toUpperCase().indexOf('M')>=0){
				partOfDate+=(date.getMonth()+1);
			}else if (formats[time].toUpperCase().indexOf('Y')>=0){
				partOfDate+=date.getFullYear();
			}
			if (partOfDate.length == 1 && formats[time].length == 2){
				partOfDate = '0'+partOfDate;
			}else if (partOfDate.length==4 && formats[time].length == 2){
				partOfDate=partOfDate.substring(2);
			}
			dateResult+=partOfDate+'/';
		}
		return dateResult.substring(0, dateResult.length - 1);
	};
});


sbiM.factory('sbiModule_user',function(){
	
	var user={};
	user.userUniqueIdentifier = '<%= StringEscapeUtils.escapeJavaScript(userUniqueIdentifier) %>';
	user.userId = '<%= StringEscapeUtils.escapeJavaScript(userId) %>';
	user.userName = '<%= StringEscapeUtils.escapeJavaScript(userName) %>'; 
	user.ismodeweb = <%= sbiMode.equals("WEB")? "true" : "false"%>;
	user.isSuperAdmin = '<%= userProfile != null && ((UserProfile)userProfile).getIsSuperadmin() %>';
	user.defaultRole = '<%= defaultRole != null ? StringEscapeUtils.escapeJavaScript(defaultRole)  : ""%>';
	
	// 	set roles
	user.roles =[];
	<% for(Object rol : userRoles) { 	%>
	user.roles.push('<%=StringEscapeUtils.escapeJavaScript(rol.toString())%>');
	<% } %>
	
	//set functionalities
	user.functionalities =[];
	<% if (userProfile != null && userProfile.getFunctionalities() != null && !userProfile.getFunctionalities().isEmpty()) {
		for(Object fun :  userProfile.getFunctionalities()){ %>
		user.functionalities.push('<%=StringEscapeUtils.escapeJavaScript(fun.toString())%>');
		<% } }%>
		
	return user;
});

sbiM.service('sbiModule_logger',function(){
	this.exec=true;
	this.log = function(val1,val2,val3){
		if(this.exec){
		console.log("[LOG] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
	this.trace = function(val1,val2,val3){
		if(this.exec){
		console.log("[TRACE] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
});

sbiM.service('sbiModule_translate', function() {
	this.addMessageFile = function(file){
		messageResource.load([file,"messages"], function(){});
	};
	
	this.load = function(key,sourceFile) {
		var sf= sourceFile == undefined? 'messages' : sourceFile;
		return messageResource.get(key, sf);
	};
});

sbiM.service('sbiModule_restServices', function($http, $q, sbiModule_config,sbiModule_logger) {
	
	var alteredContextPath=null;

	this.alterContextPath=function(cpat){
		alteredContextPath=cpat;
	}

	function getBaseUrl(endP_path) {
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path+"/"  : alteredContextPath+ "/restful-services/" + endP_path+"/" 
		alteredContextPath=null;
		return burl ;
	};

	this.get = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? 
				item = "" : 
					item = "?" + encodeURIComponent(item)
							.replace(/'/g,"%27")
							.replace(/"/g,"%22")
							.replace(/%3D/g,"=")
							.replace(/%26/g,"&");
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		return $http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.remove = function(endP_path, req_Path, item, conf) {
		item == undefined ? item = "" : item = "?" + item;
		sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.post = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.put = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
		return $http.put(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.delete = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		sbiModule_logger.trace("PUT:" +endP_path+"/"+req_Path+ "" + item,conf);
		return $http.delete(getBaseUrl(endP_path) + "" + req_Path, conf);
	};


	
	/*
	NEW METHODS
	*/
	
	var genericErrorHandling = function(data, status, headers, config, deferred) {
		/* STEFAN: ADD GENERAL BEHAVIOUR */
  		deferred.reject(data, status, headers, config);
	};
	
	var handleResponse = function(data, status, headers, config, deferred) {
		if (data.data.hasOwnProperty("errors")) {
			/* STEFAN: HANDLE OTHER ERRORS e.g. you should check also data.status  */
			
			genericErrorHandling(data, status, headers, config, deferred);
		} else {
			deferred.resolve(data, status, headers, config);
		}
	};

	// SAMPLE METHOD, this will be the implementation
	this.promiseGet = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		// Required for passing JSON on a GET request
		if (item == undefined || item==null) {
			item = "";
		}else {
			item = "?" + 
				encodeURIComponent(item)
				.replace(/'/g,"%27")
				.replace(/"/g,"%22")
				.replace(/%3D/g,"=")
				.replace(/%26/g,"&");
		}
		
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePost = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.post(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePut = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.put(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promiseDelete = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.delete(getBaseUrl(endP_path) + "" + req_Path, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
  });

sbiM.service('sbiModule_download', function(sbiModule_config,sbiModule_logger, sbiModule_device, $window) {
	var browser = sbiModule_device.browser.name;
	/* allows download of Blob files. The files processed as blob are:
			txt -> typeFile = 'text/plain'
			json -> typeFile = 'text/json'
			zip -> typeFile = 'application/zip'
			image -> typeFile = 'image/[png | jpeg | gif |...]'
	 */
	this.getBlob = function(data, nameFile, typeFile, extensionFile){
		var blob = new Blob([data],{type: typeFile}); 
		var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;
		var url = urlCreator !== undefined ? urlCreator.createObjectURL(blob) : JSON.stringify(blob);
		
		if (browser == 'internet explorer'){
			window.navigator.msSaveBlob(blob,   nameFile + '.'  + extensionFile); // The user only has the option of clicking the Save button.
		}else{
			var link = document.createElement('a');
			document.body.appendChild(link);
			link.download = nameFile + '.'  + extensionFile;
			link.href = url;
			link.target = '_blank';
			link.click();
		}
	}
			
	this.getPlain = function(data, nameFile, typeFile, extensionFile){
		if (browser == 'internet explorer'){
			this.getBlob(data, nameFile, typeFile, extensionFile);
		}else{
			text = JSON.stringify(data);	
			a = document.createElement('a');
			document.body.appendChild(a);
			a.download = nameFile+ '.'  + extensionFile;
			a.href = 'data:'+typeFile+ ';charset=utf-8,' + encodeURI(text);
			a.target = '_blank';
			a.click();
		}
	}
	/* download file from direct link */
	this.getLink = function (directLink){
		$window.open(directLink,'_blank');
	}
});

sbiM.factory('sbiModule_device',function($window){
	var deviceObj = {};
	var browserObj = {};
	
	var userAgent = $window.navigator.userAgent;
	if (/Firefox[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Firefox
		browserObj.name='firefox';
		browserObj.version = RegExp.$1;
	}else if(/Chrome[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Chrome
		browserObj.name='chrome';
		browserObj.version = RegExp.$1;
	}else{
		//detecting IE
		var detectIEregexp = "";
		if (userAgent.indexOf('MSIE') != -1){
			detectIEregexp = /MSIE (\d+\.\d+);/ //test for MSIE x.x		
		}else{ // if no "MSIE" string in userAgent
			detectIEregexp = /Trident.*rv[ :]*(\d+\.\d+)/;
		}
		if (detectIEregexp.test(userAgent)){ //if some form of IE
			browserObj.name='internet explorer';
			browserObj.version = RegExp.$1;
		 }
	 }
	if (/iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile|Android/i.test(userAgent)){
		deviceObj.isMobile = true;
	}else{
		deviceObj.isMobile = false;
	}
	deviceObj.platform = $window.navigator.platform;	

	return{
		browser : browserObj,
		device : deviceObj
	}
});
</script>